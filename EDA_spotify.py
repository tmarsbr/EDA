# %% [markdown]
# # üéµ A Anatomia de um Hit: An√°lise das M√∫sicas Mais Streamadas do Spotify
# 
# ## Introdu√ß√£o
# No mundo digital da m√∫sica, o que faz uma can√ß√£o se tornar um sucesso? 
# Esta an√°lise mergulha nos dados das m√∫sicas mais streamadas do Spotify para 
# desvendar os segredos por tr√°s dos hits modernos.

# %% [markdown]
# ## Objetivos da An√°lise
# 1. üéØ Identificar padr√µes que levam ao sucesso musical
# 2. üìä Analisar caracter√≠sticas t√©cnicas das m√∫sicas populares
# 3. üí° Descobrir insights para estrat√©gias de lan√ßamento
# 4. üåü Entender o impacto das diferentes plataformas

# %% [markdown]
# ## 1. Configura√ß√£o Inicial
# Importando as bibliotecas necess√°rias para an√°lise

# %% 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display

# %% [markdown]
# ## 2. Carregamento dos Dados
# Lendo o arquivo CSV e mostrando as primeiras linhas

# %% 
df = pd.read_csv('Spotify Most Streamed Songs.csv')
df.head()

# %% [markdown]
# ## 2.1 Padroniza√ß√£o dos Nomes das Vari√°veis
# Fun√ß√£o para limpar e padronizar nomes das colunas

# %% 
def padronizar_colunas(df):
    """
    Padroniza os nomes das colunas do DataFrame:
    - Remove caracteres especiais
    - Converte para min√∫sculas
    - Substitui espa√ßos por _
    - Remove par√™nteses e outros caracteres indesejados
    """
    df = df.copy()
    
    # Dicion√°rio de renomea√ß√£o espec√≠fica
    rename_dict = {
        'artist(s)_name': 'artistas',
        'track_name': 'musica',
        'artist_count': 'qt_artistas',
        'released_year': 'ano_lancamento',
        'released_month': 'mes_lancamento',
        'released_day': 'dia_lancamento',
        'in_spotify_playlists': 'playlists_spotify',
        'in_spotify_charts': 'charts_spotify',
        'in_apple_playlists': 'playlists_apple',
        'in_apple_charts': 'charts_apple',
        'in_deezer_playlists': 'playlists_deezer',
        'in_deezer_charts': 'charts_deezer',
        'in_shazam_charts': 'charts_shazam',
        'streams': 'streams',
        'bpm': 'bpm',
        'key': 'tom_musical',
        'mode': 'modo_musical',
        'danceability_%': 'danceability',
        'valence_%': 'valence',
        'energy_%': 'energy',
        'acousticness_%': 'acousticness',
        'instrumentalness_%': 'instrumentalness',
        'liveness_%': 'liveness',
        'speechiness_%': 'speechiness'
    }
    
    # Renomear colunas
    df = df.rename(columns=rename_dict)
    
    print("Colunas renomeadas:")
    for old, new in rename_dict.items():
        print(f"{old:25} -> {new}")
    
    return df

# Aplicar padroniza√ß√£o
df = padronizar_colunas(df)

# Verificar novos nomes
print("\nNovas colunas:")
print(df.columns.tolist())

# %% [markdown]
# ## 3. Fun√ß√£o de Metadados
# Esta fun√ß√£o gera um resumo completo do dataset, incluindo:
# - Tipos de dados
# - Valores √∫nicos
# - Valores nulos
# - Uso de mem√≥ria
# - Exemplos de valores

# %% 
def metadados(df):
    # Criar DataFrame de metadados
    meta = pd.DataFrame(index=df.columns)
    
    # Tipos de dados
    meta['Tipo'] = df.dtypes
    
    # Contagem de valores √∫nicos
    meta['Valores √önicos'] = df.nunique()
    
    # Valores nulos
    meta['Nulos'] = df.isnull().sum()
    meta['% Nulos'] = (df.isnull().sum() / len(df) * 100).round(2)
    
    # Mem√≥ria utilizada
    meta['Mem√≥ria (MB)'] = df.memory_usage(deep=True) / 1024 / 1024
    
    # Primeiros valores √∫nicos (amostra)
    meta['Exemplos'] = [df[col].dropna().unique()[:3].tolist() for col in df.columns]
    
    print("="*80)
    print(f"RESUMO DO DATASET")
    print(f"Dimens√µes: {df.shape[0]} linhas x {df.shape[1]} colunas")
    print(f"Uso de Mem√≥ria Total: {df.memory_usage().sum() / 1024 / 1024:.2f} MB")
    print("="*80)
    
    return meta

# %% [markdown]
# ## 4. An√°lise Inicial dos Dados
# Executando a fun√ß√£o de metadados para entender a estrutura do dataset

# %% 
metadados_df = metadados(df)
display(metadados_df)

# %% [markdown]
# ## 5. Limpeza e Prepara√ß√£o dos Dados
# Fun√ß√£o para limpar e corrigir tipos de dados, incluindo:
# - Remo√ß√£o de colunas desnecess√°rias
# - Convers√£o de tipos
# - Tratamento de valores nulos
# - Padroniza√ß√£o de formatos

# %% 
def limpar_dados(df):
    """
    Fun√ß√£o √∫nica para limpeza e corre√ß√£o de tipos dos dados
    """
    df = df.copy()
    
    print("üéµ Iniciando a mixagem dos dados...")
    
    # 1. Remover colunas desnecess√°rias
    print("\nüéöÔ∏è Removendo ru√≠dos (colunas desnecess√°rias)...")
    df = df.drop(columns=['cover_url'])
    
    # 2. Tratamento de Streams (outliers e formato)
    print("\nüéõÔ∏è Ajustando os n√≠veis de streams...")
    df['streams'] = pd.to_numeric(df['streams'].str.replace(',', ''), errors='coerce')
    
    # Identificar e tratar outliers em streams usando IQR
    Q1 = df['streams'].quantile(0.25)
    Q3 = df['streams'].quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    
    # Criar coluna para identificar outliers
    df['is_outlier_streams'] = (df['streams'] < limite_inferior) | (df['streams'] > limite_superior)
    print(f"üìä Identificados {df['is_outlier_streams'].sum()} outliers em streams")
    
    # 3. Tratamento de m√©tricas musicais
    metricas_musicais = ['danceability', 'energy', 'valence', 'acousticness', 
                         'instrumentalness', 'liveness', 'speechiness']
    
    print("\nüéº Normalizando caracter√≠sticas musicais...")
    for metrica in metricas_musicais:
        # Converter para float
        df[metrica] = df[metrica].astype(float)
        
        # Identificar e marcar outliers
        Q1 = df[metrica].quantile(0.25)
        Q3 = df[metrica].quantile(0.75)
        IQR = Q3 - Q1
        df[f'is_outlier_{metrica}'] = (df[metrica] < (Q1 - 1.5 * IQR)) | (df[metrica] > (Q3 + 1.5 * IQR))
        print(f"üìä {metrica}: {df[f'is_outlier_{metrica}'].sum()} outliers identificados")
    
    # 4. Tratamento de playlists
    print("\nüéØ Ajustando m√©tricas de playlists...")
    playlist_cols = ['playlists_spotify', 'playlists_apple', 'playlists_deezer']
    for col in playlist_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df[col] = df[col].fillna(df[col].median())
    
    # 5. Tratamento final
    print("\nüéπ Finalizando os ajustes...")
    df['tom_musical'] = df['tom_musical'].fillna(df['tom_musical'].mode()[0])
    
    print("\n‚ú® Mixagem conclu√≠da! Dados prontos para an√°lise.")
    return df

# %% [markdown]
# ## 6. Aplica√ß√£o da Limpeza
# Aplicando as transforma√ß√µes e verificando os resultados

# %% 
# Aplicar limpeza
df = limpar_dados(df)

# Verificar resultado
metadados_df = metadados(df)
metadados_df.head()

# %% [markdown]
# ## 7. Desvendando os Dados: Uma Jornada pelos Hits
# Vamos explorar diferentes aspectos que comp√µem um sucesso musical moderno.

# %% [markdown]
# ### 7.1 O DNA dos Hits: An√°lise das Caracter√≠sticas Musicais
# Explorando os elementos fundamentais que comp√µem as m√∫sicas mais populares

# %% 
# Fun√ß√£o para criar an√°lise univariada
def plot_univariada(df, coluna):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
    # Histograma
    sns.histplot(data=df, x=coluna, ax=ax1, color='purple', alpha=0.6)
    ax1.set_title(f'Distribui√ß√£o de {coluna}')
    ax1.grid(True, alpha=0.3)
    
    # Boxplot
    sns.boxplot(data=df, y=coluna, ax=ax2, color='purple')
    ax2.set_title(f'Boxplot de {coluna}')
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

# An√°lise das principais vari√°veis num√©ricas
variaveis_numericas = ['streams', 'danceability', 'energy', 'valence']
for var in variaveis_numericas:
    plot_univariada(df, var)

# %% [markdown]
# ### 7.2 A Dan√ßa dos N√∫meros: Correla√ß√µes e Padr√µes
# Descobrindo como diferentes caracter√≠sticas musicais se relacionam com o sucesso

# %% 
def plot_bivariada(df, x, y):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
    # Scatter plot
    sns.scatterplot(data=df, x=x, y=y, ax=ax1, alpha=0.5, color='purple')
    ax1.set_title(f'Rela√ß√£o entre {x} e {y}')
    
    # Line plot com m√©dia m√≥vel
    df_sorted = df.sort_values(by=x)
    sns.regplot(data=df_sorted, x=x, y=y, ax=ax2, 
                scatter_kws={'alpha':0.5}, 
                line_kws={'color': 'red'})
    ax2.set_title(f'Tend√™ncia entre {x} e {y}')
    
    plt.tight_layout()
    plt.show()

# An√°lises bivariadas relevantes
pares_analise = [
    ('danceability', 'streams'),
    ('energy', 'streams'),
    ('valence', 'streams'),
    ('danceability', 'energy')
]

for x, y in pares_analise:
    plot_bivariada(df, x, y)

# %% [markdown]
# ### 7.3 A Arte da Composi√ß√£o: Elementos Musicais
# Analisando as escolhas art√≠sticas que definem os hits

# %% 
def plot_univariada_categorica(df, coluna, limite_categorias=10):
    """
    An√°lise univariada para vari√°veis categ√≥ricas com gr√°fico de barras e pizza
    """
    # Preparar dados
    contagem = df[coluna].value_counts()
    if len(contagem) > limite_categorias:
        outras = pd.Series({'Outras': contagem[limite_categorias:].sum()})
        contagem = pd.concat([contagem[:limite_categorias], outras])
    
    # Criar subplots
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Gr√°fico de barras atualizado
    data_plot = pd.DataFrame({
        'Categoria': contagem.index,
        'Contagem': contagem.values
    })
    sns.barplot(data=data_plot,
                x='Contagem',
                y='Categoria',
                ax=ax1,
                color='skyblue',
                alpha=0.8)
    ax1.set_title(f'Distribui√ß√£o de {coluna}')
    ax1.set_xlabel('Contagem')
    
    # Gr√°fico de pizza
    wedges, texts, autotexts = ax2.pie(contagem.values, 
                                      labels=contagem.index,
                                      autopct='%1.1f%%', 
                                      colors=sns.color_palette('viridis', n_colors=len(contagem)))
    ax2.set_title(f'Propor√ß√£o de {coluna}')
    
    plt.tight_layout()
    plt.show()

# An√°lise das principais vari√°veis categ√≥ricas
variaveis_categoricas = ['tom_musical', 'modo_musical', 'qt_artistas']
for var in variaveis_categoricas:
    plot_univariada_categorica(df, var)

# %% [markdown]
# ### 7.4 Rela√ß√£o entre Caracter√≠sticas Categ√≥ricas e Num√©ricas
# Explorando como diferentes categorias influenciam m√©tricas de sucesso

# %%
def plot_bivariada_cat_num(df, cat_col, num_col):
    """
    An√°lise bivariada entre vari√°vel categ√≥rica e num√©rica com visualiza√ß√µes simplificadas e claras
    """
    # Configurar o estilo
    sns.set_style("whitegrid")
    
    # Criar figura
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))
    
    # 1. Boxplot aprimorado
    sns.boxplot(data=df, 
                x=cat_col, 
                y=num_col,
                ax=ax1,
                hue=cat_col,
                legend=False)
    
    # Personaliza√ß√£o do boxplot
    ax1.set_title(f'Distribui√ß√£o de {num_col} por {cat_col}', pad=20, fontsize=14)
    ax1.set_xlabel(cat_col, fontsize=12)
    ax1.set_ylabel(num_col, fontsize=12)
    ax1.tick_params(axis='x', rotation=45)
    
    # Adicionar pontos de m√©dia
    means = df.groupby(cat_col)[num_col].mean()
    ax1.scatter(range(len(means)), means, color='red', s=100, marker='D', label='M√©dia')
    ax1.legend()
    
    # 2. Gr√°fico de barras com m√©dias
    sns.barplot(data=df,
                x=cat_col,
                y=num_col,
                ax=ax2,
                hue=cat_col,
                legend=False,
                errorbar=('ci', 95),
                capsize=0.05)
    
    # Personaliza√ß√£o do gr√°fico de barras
    ax2.set_title(f'M√©dia de {num_col} por {cat_col}', pad=20, fontsize=14)
    ax2.set_xlabel(cat_col, fontsize=12)
    ax2.set_ylabel(f'M√©dia de {num_col}', fontsize=12)
    ax2.tick_params(axis='x', rotation=45)
    
    # Adicionar valores nas barras
    for i, v in enumerate(df.groupby(cat_col)[num_col].mean()):
        ax2.text(i, v, f'{v:,.0f}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.show()
    
    # Exibir estat√≠sticas resumidas
    print(f"\nEstat√≠sticas de {num_col} por {cat_col}:")
    stats = df.groupby(cat_col)[num_col].agg(['count', 'mean', 'std', 'min', 'max'])
    display(stats.round(2))

# An√°lises bivariadas relevantes
analises_cat_num = [
    ('modo_musical', 'streams'),
    ('tom_musical', 'streams'),
    ('qt_artistas', 'streams')
]

for cat_col, num_col in analises_cat_num:
    plot_bivariada_cat_num(df, cat_col, num_col)

# %% [markdown]
# ### Insights das An√°lises Bivariadas
# 
# 1. **Modo Musical vs Streams**
#    - Compara√ß√£o clara entre modos maior e menor
#    - Distribui√ß√£o e m√©dias de streams por modo
#    - Identifica√ß√£o de outliers significativos
# 
# 2. **Tom Musical vs Streams**
#    - Padr√µes de popularidade por tom
#    - Tons mais comuns em hits
#    - Variabilidade dentro de cada tom
# 
# 3. **Quantidade de Artistas vs Streams**
#    - Impacto de colabora√ß√µes no sucesso
#    - N√∫mero ideal de artistas por faixa
#    - Tend√™ncias de colabora√ß√£o

# %% [markdown]
# ### Insights das An√°lises Categ√≥ricas
# 
# 1. **Distribui√ß√£o de Caracter√≠sticas Musicais**
#    - Distribui√ß√£o dos tons musicais
#    - Propor√ß√£o de modos maior/menor
#    - Padr√µes de colabora√ß√µes entre artistas
# 
# 2. **Rela√ß√µes com Performance**
#    - Impacto do tom musical nos streams
#    - Diferen√ßas de popularidade entre modos
#    - Efeito de colabora√ß√µes no sucesso

# %% [markdown]
# ### 7.5 An√°lise Aprofundada dos Resultados

# %% [markdown]
# #### An√°lise de Streams e Popularidade

# %%
# Calculando estat√≠sticas de streams
print("üìä An√°lise de Distribui√ß√£o dos Streams")
print("-" * 50)
print(f"M√©dia de streams: {df['streams'].mean():,.0f}")
print(f"Mediana de streams: {df['streams'].median():,.0f}")
print(f"Top 10% das m√∫sicas acumulam: {(df['streams'].nlargest(int(len(df)*0.1)).sum() / df['streams'].sum() * 100):.1f}% dos streams totais")

# %% [markdown]
# #### Top 10 Hits Mais Streamados

# %%
# An√°lise dos maiores hits
top_hits = df.nlargest(10, 'streams')[['musica', 'artistas', 'streams', 'danceability', 'energy']]
print("\nüéµ Top 10 M√∫sicas Mais Streamadas")
print("-" * 50)
display(top_hits)

# %% [markdown]
# #### Insights dos Hits
# 
# 1. **Concentra√ß√£o de Streams**
#    - Alta concentra√ß√£o no topo da distribui√ß√£o
#    - Diferen√ßa significativa entre m√©dia e mediana
#    - Padr√£o t√≠pico de distribui√ß√£o de cauda longa
# 
# 2. **Caracter√≠sticas dos Top Hits**
#    - Combina√ß√£o ideal de danceability e energy
#    - Presen√ßa forte de artistas estabelecidos
#    - Padr√µes consistentes nas caracter√≠sticas musicais

# %% [markdown]
# #### An√°lise Musical T√©cnica

# %%
# Caracter√≠sticas Musicais
print("\nüéº Caracter√≠sticas Musicais de Sucesso")
print("-" * 50)
print(f"Danceability: {df['danceability'].mean():.1f}% m√©dia (correla√ß√£o: {df['danceability'].corr(df['streams']):.2f})")
print(f"Energy: {df['energy'].mean():.1f}% m√©dia (correla√ß√£o: {df['energy'].corr(df['streams']):.2f})")
print(f"Valence: {df['valence'].mean():.1f}% m√©dia (correla√ß√£o: {df['valence'].corr(df['streams']):.2f})")

# Tons e Modos
print("\nüéπ An√°lise de Tons e Modos")
print("-" * 50)
top_tons = df.groupby('tom_musical')['streams'].mean().nlargest(3)
print("Tons mais populares:")
for tom, streams in top_tons.items():
    print(f"- {tom}: {streams:,.0f} streams m√©dios")

# %% [markdown]
# #### An√°lise de Colabora√ß√µes

# %%
# Impacto das Colabora√ß√µes
print("\nü§ù Impacto das Colabora√ß√µes")
print("-" * 50)
colaboracoes = df.groupby('qt_artistas').agg({
    'streams': ['count', 'mean', 'median'],
    'playlists_spotify': 'mean'
}).round(2)
colaboracoes.columns = ['_'.join(col).strip() for col in colaboracoes.columns.values]

# Formatar os n√∫meros para facilitar a leitura
colaboracoes['streams_mean'] = colaboracoes['streams_mean'].apply(lambda x: f"{x:,.0f}")
colaboracoes['streams_median'] = colaboracoes['streams_median'].apply(lambda x: f"{x:,.0f}")
colaboracoes['playlists_spotify_mean'] = colaboracoes['playlists_spotify_mean'].apply(lambda x: f"{x:,.0f}")

display(colaboracoes)

# Artistas Mais Frequentes
print("\nüë®‚Äçüé§ Top 10 Artistas Mais Frequentes")
print("-" * 50)
top_artistas = df['artistas'].value_counts().head(10)
for artista, count in top_artistas.items():
    print(f"{artista}: {count} m√∫sicas")

# ...rest of existing code...

# %% [markdown]
# ## 8. Conclus√£o: O DNA do Sucesso Musical üéµ

# %%
print("\nüéØ Conclus√µes Principais da An√°lise")
print("-" * 50)

# 1. Caracter√≠sticas Musicais
print("\n1. Caracter√≠sticas que Definem o Sucesso:")
print("   ‚úì Danceability m√©dio de {:.1f}%".format(df['danceability'].mean()))
print("   ‚úì Energy m√©dio de {:.1f}%".format(df['energy'].mean()))
print("   ‚úì Valence m√©dio de {:.1f}%".format(df['valence'].mean()))

# 2. Padr√µes de Colabora√ß√£o
colaboracoes_media = df.groupby('qt_artistas')['streams'].mean()
n_ideal = colaboracoes_media.idxmax()
print(f"\n2. Colabora√ß√µes:")
print(f"   ‚úì N√∫mero ideal de artistas: {n_ideal}")
print(f"   ‚úì {df[df['qt_artistas'] > 1]['musica'].count()} m√∫sicas s√£o colabora√ß√µes")

# 3. Plataformas
print("\n3. Presen√ßa nas Plataformas:")
print(f"   ‚úì M√©dia de playlists Spotify: {df['playlists_spotify'].mean():.0f}")
print(f"   ‚úì M√©dia de playlists Apple: {df['playlists_apple'].mean():.0f}")
print(f"   ‚úì M√©dia de playlists Deezer: {df['playlists_deezer'].mean():.0f}")

# %% [markdown]
# ### Principais Insights üîç
# 
# 1. **Caracter√≠sticas do Sucesso**
#    - A combina√ß√£o ideal de danceability e energy √© crucial
#    - M√∫sicas com alta danceability tendem a ter mais streams
#    - O equil√≠brio entre elementos musicais √© fundamental
# 
# 2. **Impacto das Colabora√ß√µes**
#    - Colabora√ß√µes m√∫ltiplas t√™m maior potencial viral
#    - Parcerias estrat√©gicas aumentam o alcance
#    - Diversidade de artistas amplia o p√∫blico
# 
# 3. **Distribui√ß√£o nas Plataformas**
#    - Presen√ßa multi-plataforma √© essencial
#    - Spotify lidera em termos de alcance
#    - Estrat√©gia diversificada de distribui√ß√£o √© importante
# 
# 4. **Recomenda√ß√µes Finais**
#    - Foco em elementos que promovem danceability
#    - Investir em colabora√ß√µes estrat√©gicas
#    - Manter presen√ßa forte em m√∫ltiplas plataformas
#    - Equilibrar caracter√≠sticas musicais para m√°ximo apelo

# %%
